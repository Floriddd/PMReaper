var pyBridge;
var currentProject = "";
var currentSeason = "";
var currentBaseDir = "";
var currentEpisode = "";
var episodesData = {};

new QWebChannel(qt.webChannelTransport, function(channel) {
    pyBridge = channel.objects.pyBridge;
    refreshBaseDirList();
    refreshProjectList();
});

function setBaseDir() {
    var path = document.getElementById("baseDir").value;
    pyBridge.setBaseDirectory(path, function(response) {
        console.log(response);
    });
}

function browseBaseDir() {
    pyBridge.browseDirectory(function(path) {
        if (path) {
            document.getElementById("newBaseDir").value = path;
            console.log("–ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: " + path);
        }
    });
}

function refreshBaseDirList() {
    pyBridge.listBaseDirectories(function(response) {
        var baseDirs = JSON.parse(response);
        var listElem = document.getElementById("baseDirList");
        listElem.innerHTML = "";
        baseDirs.forEach(function(dir, index) {
            var li = document.createElement("li");
            var dirName = dir;
            if (dir.length > 50) {
                dirName = "..." + dir.slice(-50);
            }
            li.textContent = dirName;
            li.title = dir;

            var selectBtn = document.createElement("button");
            selectBtn.textContent = "‚û°Ô∏è";
            selectBtn.onclick = function() { setCurrentBaseDir(index); };
            li.appendChild(selectBtn);

            var deleteBtn = document.createElement("button");
            deleteBtn.textContent = "‚ùå";
            deleteBtn.onclick = function() {
                if (confirm("–£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é " + dir + "?")) {
                    deleteBaseDir(index);
                }
            };
            li.appendChild(deleteBtn);

            listElem.appendChild(li);
        });
    });
}

function addBaseDir() {
    var path = document.getElementById("newBaseDir").value;
    if (!path) return;
    pyBridge.addBaseDirectory(path, function(response) {
        console.log(response);
        refreshBaseDirList();
        document.getElementById("newBaseDir").value = "";
    });
}

function deleteBaseDir(index) {
    pyBridge.deleteBaseDirectory(index, function(response) {
        console.log(response);
        refreshBaseDirList();
        refreshProjectList();
    });
}
function setCurrentBaseDir(index) {
    pyBridge.setCurrentBaseDirectory(index, function(response) {
        console.log(response);
        refreshProjectList();
        showSection('projectListSection');
        document.getElementById("currentBaseDirName").textContent = currentBaseDir;
});
}

function refreshProjectList() {
    pyBridge.listProjects(function(response) {
        console.log("JS: –û—Ç–≤–µ—Ç –æ—Ç listProjects:", response);
        var projects = JSON.parse(response);
        if (projects === null) {
            projects = [];
        }
        var listElem = document.getElementById("projectList");
        listElem.innerHTML = "";
        projects.forEach(function(proj) {
            var li = document.createElement("li");
            li.textContent = proj + " ";

            var openBtn = document.createElement("button");
            openBtn.textContent = "‚û°Ô∏è";
            openBtn.onclick = function() { openProject(proj); };
            li.appendChild(openBtn);

            var deleteBtn = document.createElement("button");
            deleteBtn.textContent = "‚ùå";
            deleteBtn.onclick = function() {
                if (confirm("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç " + proj + "?")) {
                    deleteProject(proj);
                }
            };
            li.appendChild(deleteBtn);

            listElem.appendChild(li);
        });
    });
}

function createProject() {
    var projectName = document.getElementById("newProjectName").value.trim();
    if (!projectName) return;
    pyBridge.createProject(projectName, function(response) {
        console.log(response);
        refreshProjectList();
    });
}

function deleteProject(projectName) {
    pyBridge.deleteProject(projectName, function(response) {
        console.log(response);
        refreshProjectList();
    });
}

function openProject(projectName) {
    currentProject = projectName;
    currentSeason = "";
    currentEpisode = "";
    console.log("JS: openProject - currentProject set to:", currentProject);
    pyBridge.setCurrentProject(projectName);

    document.getElementById("currentProjectName").textContent = projectName;
    showSection("projectDetailSection");
    refreshTree();
}


function backToProjects() {
    showSection("projectListSection");
}

function backToBaseDirList() {
    showSection("baseDirSection");
}

function refreshTree() {

    pyBridge.listEpisodes(currentProject, function(response) {
        episodesData = JSON.parse(response);
        var container = document.getElementById("treeContainer");
        container.innerHTML = "";
        var seasons = Object.keys(episodesData).map(Number).sort(function(a, b){return a-b});

        seasons.forEach(function(season) {
            var seasonDiv = document.createElement("div");
            seasonDiv.className = "season";
            seasonDiv.dataset.season = season;

            var header = document.createElement("h3");
            header.textContent = season + " —Å–µ–∑–æ–Ω";
            seasonDiv.appendChild(header);

            var editSeasonBtn = document.createElement("button");
            editSeasonBtn.textContent = "‚úèÔ∏è";
            editSeasonBtn.onclick = function() { toggleSeasonEdit(season, seasonDiv); };
            seasonDiv.appendChild(editSeasonBtn);

            var openSeasonBtn = document.createElement("button");
            openSeasonBtn.textContent = "üìÇ";
            openSeasonBtn.onclick = function() { openSeasonFolder(season); };
            seasonDiv.appendChild(openSeasonBtn);

            var deleteSeasonBtn = document.createElement("button");
            deleteSeasonBtn.textContent = "‚ùå";
            deleteSeasonBtn.onclick = function() {
                if (confirm("–£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω " + season + " –∏ –≤—Å–µ –µ–≥–æ —ç–ø–∏–∑–æ–¥—ã?")) {
                    deleteSeason(season);
                }
            };
            seasonDiv.appendChild(deleteSeasonBtn);

            var epList = document.createElement("ul");
            if (episodesData[season] && episodesData[season].length > 0) {
                episodesData[season].sort(function(a, b){return a-b});
                episodesData[season].forEach(function(ep) {
                    var li = document.createElement("li");
                    li.dataset.episode = ep;
                    li.dataset.season = season;
                    li.className = "episode";
                    li.textContent = ep + " —Å–µ—Ä–∏—è ";
                    li.addEventListener('click', function() {
                        selectEpisode(season, ep, li);
                    });

                    var editEpBtn = document.createElement("button");
                    editEpBtn.textContent = "‚úèÔ∏è";
                    editEpBtn.onclick = function() { toggleEpisodeEdit(season, ep, li); };
                    li.appendChild(editEpBtn);

                    var openEpBtn = document.createElement("button");
                    openEpBtn.textContent = "üìÇ";
                    openEpBtn.onclick = function() { openEpisodeFolder(season, ep); };
                    li.appendChild(openEpBtn);

                    var openRppBtn = document.createElement("button");
                    openRppBtn.textContent = "–ó–∞–ø—É—Å—Ç–∏—Ç—å";
                    openRppBtn.onclick = function() { openProjectFile(season, ep); };
                    li.appendChild(openRppBtn);

                    var deleteEpBtn = document.createElement("button");
                    deleteEpBtn.textContent = "‚ùå";
                    deleteEpBtn.onclick = function() {
                        if (confirm("–£–¥–∞–ª–∏—Ç—å —ç–ø–∏–∑–æ–¥ " + ep + " —Å–µ–∑–æ–Ω–∞ " + season + "?")) {
                            deleteEpisode(season, ep);
                        }
                    };
                    li.appendChild(deleteEpBtn);

                    epList.appendChild(li);
                });
            } else {
                var p = document.createElement("p");
                p.textContent = "–ù–µ—Ç —ç–ø–∏–∑–æ–¥–æ–≤.";
                seasonDiv.appendChild(p);
            }
            var addEpBtn = document.createElement("button");
            addEpBtn.textContent = "+ –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é";
            addEpBtn.onclick = function() { addEpisode(season); };

            seasonDiv.appendChild(epList);
            seasonDiv.appendChild(addEpBtn);

            container.appendChild(seasonDiv);
        });
        if (seasons.length === 0) {
            container.innerHTML = "<p>–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∑–æ–Ω.</p>";
        }
    });

}

function addSeason() {
    var seasons = Object.keys(episodesData).map(Number);
    var nextSeason = seasons.length > 0 ? Math.max(...seasons) + 1 : 1;
    pyBridge.addSeason(currentProject, nextSeason, function(response) {
        console.log(response);
        refreshTree();
    });
}

function addEpisode(season) {
    var eps = episodesData[season] || [];
    var nextEpisode = eps.length > 0 ? Math.max(...eps) + 1 : 1;
    pyBridge.addEpisode(currentProject, season, nextEpisode, function(response) {
        console.log(response);
        refreshTree();
    });
}

function deleteEpisode(season, episode) {
    pyBridge.deleteEpisode(currentProject, season, episode, function(response) {
        console.log(response);
        refreshTree();
    });
}

function deleteSeason(season) {
    pyBridge.deleteSeason(currentProject, season, function(response) {
        console.log(response);
        refreshTree();
    });
}

function openEpisodeFolder(season, episode) {
    pyBridge.openEpisodeFolder(currentProject, season, episode, function(response) {
        currentSeason = season;
        console.log(response);
    });
}

function openSeasonFolder(season) {
    pyBridge.openSeasonFolder(currentProject, season, function(response) {
        console.log(response);
    });
}

function openProjectFile(season, episode) {
    pyBridge.openProjectFile(currentProject, season, episode, function(response) {
        console.log(response);
    });
}

function toggleSeasonEdit(oldSeason, seasonDiv) {
    var input = seasonDiv.querySelector("input.seasonEditInput");
    if (!input) {
        input = document.createElement("input");
        input.type = "number";
        input.className = "seasonEditInput";
        input.value = oldSeason;
        seasonDiv.appendChild(input);
        var saveBtn = document.createElement("button");
        saveBtn.textContent = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å";
        saveBtn.className = "seasonSaveBtn";
        saveBtn.onclick = function() {
            var newSeason = parseInt(input.value);
            if (isNaN(newSeason) || newSeason <= 0) {
                console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞");
                return;
            }
            pyBridge.renameSeason(currentProject, oldSeason, newSeason, function(response) {
                console.log(response);
                refreshTree();
            });
        };
        seasonDiv.appendChild(saveBtn);
    } else {
        var saveBtn = seasonDiv.querySelector("button.seasonSaveBtn");
        if (saveBtn) saveBtn.remove();
        input.remove();
    }
}

function toggleEpisodeEdit(season, oldEpisode, li) {
    var input = li.querySelector("input.episodeEditInput");
    if (!input) {
        input = document.createElement("input");
        input.type = "number";
        input.className = "episodeEditInput";
        input.value = oldEpisode;
        li.appendChild(input);
        var saveBtn = document.createElement("button");
        saveBtn.textContent = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å";
        saveBtn.className = "episodeSaveBtn";
        saveBtn.onclick = function() {
            var newEpisode = parseInt(input.value);
            if (isNaN(newEpisode) || newEpisode <= 0) {
                console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞");
                return;
            }
            pyBridge.renameEpisode(currentProject, season, oldEpisode, newEpisode, function(response) {
            console.log(response);
            refreshTree();
            });
        };
        li.appendChild(saveBtn);
    } else {
        var saveBtn = li.querySelector("button.episodeSaveBtn");
        if (saveBtn) saveBtn.remove();
        input.remove();
    }
}

var selectedEpisodeLi = null;

function selectEpisode(season, episode, liElement) {
    if (selectedEpisodeLi && selectedEpisodeLi !== liElement) {
        selectedEpisodeLi.classList.remove('selected');
    }
    liElement.classList.add('selected');
    selectedEpisodeLi = liElement;

    currentSeason = season;
    currentEpisode = episode;
    console.log("JS: selectEpisode - currentSeason set to:", currentSeason, ", currentEpisode:", currentEpisode);
    pyBridge.setCurrentSeasonEpisode(season, episode);

    updateRightPanel(season, episode);

}


function updateRightPanel(season, episode) {
    if (!season || !episode || !currentProject) {
        return;
    }
    
    console.log(`–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: ${currentProject}, —Å–µ–∑–æ–Ω: ${season}, —ç–ø–∏–∑–æ–¥: ${episode}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é getFilesByType –∏–∑ –º–æ—Å—Ç–∞
    pyBridge.getFilesByType(currentProject, season, episode, function(filesByType) {
        console.log("–ü–æ–ª—É—á–µ–Ω—ã —Ñ–∞–π–ª—ã:", filesByType);
        
        try {
            // –ü–∞—Ä—Å–∏–º JSON, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            const files = typeof filesByType === 'string' ? JSON.parse(filesByType) : filesByType;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤
            updateFileList('rawsList', files.raws || [], 'raws');
            updateFileList('roadsList', files.roads || [], 'roads');
            updateFileList('voiceList', files.voice || [], 'voice');
            updateFileList('subsList', files.subs || [], 'subs');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
            const rawsCounter = document.getElementById('rawsCounter');
            if (rawsCounter) rawsCounter.textContent = `${files.raws ? files.raws.length : 0} —Ñ–∞–π–ª–æ–≤`;
            
            const roadsCounter = document.getElementById('roadsCounter');
            if (roadsCounter) roadsCounter.textContent = `${files.roads ? files.roads.length : 0} —Ñ–∞–π–ª–æ–≤`;
            
            const voiceCounter = document.getElementById('voiceCounter');
            if (voiceCounter) voiceCounter.textContent = `${files.voice ? files.voice.length : 0} —Ñ–∞–π–ª–æ–≤`;
            
            const subsCounter = document.getElementById('subsCounter');
            if (subsCounter) subsCounter.textContent = `${files.subs ? files.subs.length : 0} —Ñ–∞–π–ª–æ–≤`;
            
            console.log("–ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        }
    });
}

function updateFileList(listId, files, folderType) {
    var listElem = document.getElementById(listId);
    listElem.innerHTML = "";
    
    if (!files || files.length === 0) {
        var li = document.createElement("li");
        li.className = "empty-message";
        li.textContent = "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤.";
        listElem.appendChild(li);
        return;
    }
    
    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (–∫–æ–≥–¥–∞ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å name –∏ path)
    // –∏ –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (–∫–æ–≥–¥–∞ —Ñ–∞–π–ª—ã - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—É—Ç–∏)
    files.forEach(function(file) {
        var li = document.createElement("li");
        li.className = "file-item";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (–ø—É—Ç—å)
        let fileName, filePath;
        if (typeof file === 'object' && file.name) {
            fileName = file.name;
            filePath = file.path;
        } else {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
            filePath = file;
            fileName = file.split('\\').pop().split('/').pop();
        }
        
        li.textContent = fileName;
        li.dataset.fullpath = filePath;
        li.dataset.file = fileName;
        li.dataset.folderType = folderType;
        li.draggable = true;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        const extension = ('.' + fileName.split('.').pop()).toLowerCase();
        if (['.mp3', '.wav', '.ogg', '.flac', '.aif', '.aiff', '.m4a', '.wma'].includes(extension)) {
            li.classList.add('audio');
        } else if (['.mp4', '.avi', '.mov', '.mkv', '.wmv'].includes(extension)) {
            li.classList.add('video');
        } else if (['.txt', '.srt', '.ass', '.ssa', '.vtt'].includes(extension)) {
            li.classList.add('text');
        }
        
        li.addEventListener('dragstart', dragStart);
        li.addEventListener('click', function() {
            // –í—ã–¥–µ–ª—è–µ–º —Ñ–∞–π–ª
            document.querySelectorAll('.file-item').forEach(el => el.classList.remove('selected'));
            li.classList.add('selected');
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
            pyBridge.openFile(filePath);
        });
        
        listElem.appendChild(li);
    });
}

function openFolderForType(folderType) {
    if (!currentSeason || !selectedEpisodeLi) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –∏ —ç–ø–∏–∑–æ–¥.");
        return;
    }
    pyBridge.openFolderForType(currentProject, currentSeason, currentEpisode, folderType, function(response) {
        console.log(response);
    });
}

function showSection(sectionId) {
    document.getElementById("projectListSection").classList.add("hidden");
    document.getElementById("projectDetailSection").classList.add("hidden");
    document.getElementById("selectProjectDirSection").classList.add("hidden");
    document.getElementById(sectionId).classList.remove("hidden");
}

function allowDrop(event) {
    event.preventDefault();
}

function dragStart(event) {
    var fullpath = event.target.dataset.fullpath;
    if (fullpath) {
        event.dataTransfer.setData("text/uri-list", "file:///" + fullpath.replace(/\\/g, '/'));
        event.dataTransfer.setData("text/plain", fullpath);
        event.dataTransfer.setData("folderType", event.target.dataset.folderType);
        event.dataTransfer.setData("source-type", event.target.dataset.folderType);

        event.target.classList.add('dragged');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º source element –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        window.currentDraggedElement = event.target;
        
        event.dataTransfer.effectAllowed = "copyMove";
    }
}


function drop(event, targetFolderType) {
    event.preventDefault();
    event.stopPropagation();
    console.log("Drop –Ω–∞ –ø–∞–ø–∫—É:", targetFolderType);
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã drop-target
    document.querySelectorAll('.drop-target').forEach(el => {
        el.classList.remove('drop-target');
    });
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    document.querySelectorAll('.drop-target-container').forEach(el => {
        el.classList.remove('drop-target-container');
        el.removeAttribute('data-highlight-type');
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∏ —Ç–∏–ø –ø–∞–ø–∫–∏
    const filePath = event.dataTransfer.getData('text/plain');
    const sourceType = event.dataTransfer.getData('source-type') || event.dataTransfer.getData('folderType');
    
    // –ï—Å–ª–∏ filePath —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    if (filePath) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Ü–µ–ª—å —Ä–∞–∑–Ω—ã–µ
        if (sourceType !== targetFolderType) {
            console.log(`–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ ${sourceType} –≤ ${targetFolderType}: ${filePath}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            if (currentProject && currentSeason && currentEpisode) {
                // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                pyBridge.moveFile(filePath, targetFolderType, currentProject, currentSeason, currentEpisode, function(result) {
                    if (result === "success") {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
                        updateRightPanel(currentSeason, currentEpisode);
                        showToast(`–§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ ${getTypeName(targetFolderType)}`, 'success');
                    } else {
                        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª', 'error');
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', result);
                    }
                });
            } else {
                showToast('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —Å–µ–∑–æ–Ω –∏ —ç–ø–∏–∑–æ–¥', 'warning');
            }
        } else {
            // –ï—Å–ª–∏ —Ç–∏–ø —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            console.log('–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
        }
    } else {
        // –í–Ω–µ—à–Ω–µ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ (–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
        // –î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è PyQt, –Ω–µ –≤ JavaScript
        console.log('–í–Ω–µ—à–Ω–µ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ, –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ PyQt');
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, warning)
 */
function showToast(message, type = 'info', duration = 3000) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast
    setTimeout(() => {
        toast.classList.add('show');
    }, 10);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            document.body.removeChild(toast);
        }, 300);
    }, duration);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ç–∏–ø–∞ –ø–∞–ø–∫–∏
 * @param {string} type - –¢–∏–ø –ø–∞–ø–∫–∏
 * @returns {string} - –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
 */
function getTypeName(type) {
    const typeNames = {
        'raws': '–†–∞–≤–∫–∏',
        'roads': '–î–µ–ª—ë–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏',
        'voice': '–û–∑–≤—É—á–∫–∞',
        'subs': '–°—É–±—Ç–∏—Ç—Ä—ã'
    };
    
    return typeNames[type] || type;
}